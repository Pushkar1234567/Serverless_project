# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  # configValidationMode: error
  deploymentBucket:
    name: mahakal

# custom:
#   pythonRequirements:
#     dockerizePip: true




plugins:
  - serverless-offline
  - serverless-python-requirements
functions:
  create:
    handler: handler.create
    events:
      - http:
          path: create
          method: post
  listing:
    handler: listing_api/handler.listing
    events:
      - http:
          path: listing
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                search_term: true
                search_by: true
                # email: true
                user_id: true
                # limit:
                #   type: string
                #   default: 10
                #   minimum: 1
                #   maximum: 100
                # offset:
                #   type: string
                #   default: 0
                #   minimum: 0
                #   maximum: 10000
  update:
    handler: handler.update
    events:
      - http:
          path: update/{id}
          method: put
  retrieve:
    handler: handler.retrieve
    events:
      - http:
          path: retrieve/{id}
          method: get
  delete:
    handler: handler.delete
    events:
      - http:
          path: delete/{id}
          method: delete
  signup:
    handler: signup/handler.signup
    events:
      - http:
          path: signup
          method: post
  login:
    handler: login_api/handler.login
    events:
      - http:
          path: login
          method: post
          request:
            parameters:
                querystrings:
                  show_messages: true
  friend_request_send:
    handler: handler.friend_request_send
    events:
      - http:
          path: /send
          method: post
  friend_request_accept:
    handler: handler.friend_request_accept
    events:
      - http:
          path: /accept
          method: post
  friend_request_rejected:
    handler: handler.friend_request_rejected
    events:
      - http:
          path: /reject
          method: post

  friend_remove:
    handler: handler.friend_remove
    events:
      - http:
          path: /remove
          method: post
  
    environment:
      DEFAULT_LIMIT: 10
      DEFAULT_OFFSET: 0
  # fatch:
  #   handler: handler.fatch
  #   events:
  #     - http:
  #         path: fatch
  #         mathod: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
